.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x$conf.int(60,100)
x$conf.int
binom.test(60,100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)
poisson.test(5,94.32)$conf
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g1-g2
difference <- g2-g1
mean(difference)
s <- sd(different)
s <- sd(difference)
10 + c(-1,1)*
.0975
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
(29-8-1)*(15.34-8)^2+(29-21-1)*(18.23-21)^2
sp <- 7*15.34^2 + 20*18.23^2
27
ns <- 27
sp <- (sp/ns)^(1/2)
sp <- sqrt(sp/ns)
c(-1,1)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sqrt(var(g1+g2)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
sp*sqrt(1/10+1/10)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2-g1)$conf
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- 1
num <- (15.34^2/8 + 18.23^2/21)^2
den <- 1
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
myd <- num/den
mydf <- num/den
1
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
library(swirl)
swirl()
10
10/sqrt(100)
(32-30)/(10/sqrt(100))
(32-30)/(s/sqrt(16))
(32-30)/(10/sqrt(16))
15
qt(0.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885*sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
6
8
?rexp
?par
?qnorm
dim(ToothGrowth)
ToothGrowth
ToothGrowth
class(ToothGrowth$dose)
?grep
data=ToothGrowth
first= data[,grep(pattern="0.5".data$dose)]
first= data[,grep(pattern="0.5",data$dose)]
first= data[,grep("0.5",data$dose)]
colnames(data)
first= data[grep("0.5",data$dose),]
first
dim(first)
second= data[grep("1.0",data$dose),]
third= data[grep("2.0",data$dose),]
dim(second)
dim(third)
unique(data$dose)
class(data$dose)
second
first= data[grep("0.5",data$dose),]
first= data[grep("0.5|1.0",data$dose),]
second= data[grep("1.0|2.0",data$dose),]
third= data[grep("2.0|0.5",data$dose),]
first
length(unique(data$dose=="0.5"))
length(unique(data$dose=="1.0"))
length(data$dose==").5")
length(data$dose=="0.5")
a<-subset(ToothGrowth, dose==0.5)
b<-subset(ToothGrowth, dose==1.0)
c<-subset(ToothGrowth, dose==2.0)
t.test(a,b,pair=TRUE)
t.test(a$len,b$len,pair=TRUE)
a$len
a<-subset(ToothGrowth, dose==0.5&1.0)
a
a<-subset(ToothGrowth, dose==0.5&&1.0)
uniue(a$dose)
unique(a$dose)
library(swirl)
swril()
swirl()
?cbind
source('C:/Users/sora/Desktop/try.R')
0
quit()
library(swirl)
swirl()
?separate()
?separate
separate(res,sex_class, into =c("sex","class"))
?chain
submit()
submit()
quit()
library(swirl)
swirl()
mydf <- read.csv(oatg2csv,stringsAsFactors=FALSE)
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?rm
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arh:country)
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package =="swirl")
filter(cran,r_version =="3.1.1",country =="US")
?Comparison
filter(cranr_version <="3.0.2", country =="IN",)
filter(cran,r_version <="3.0.2", country =="IN",)
filter(cran,r_version <="3.0.2", country =="IN")
filter(cran,country =="US"|country =="IN")
filter(cran,country =="US"|country =="IN",size>100500)
filter(cran,size>100500,r_os =="lingux-gnu")
filter(cran,size > 100500,r_os =="lingux-gnu")
filter(cran,size > 100500,r_os =="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is,na(r_version == "NA"))
filter(cran,!is,na(r_version == NA))
filter(cran,!is.na(r_version == "NA"))
filter(cran,!is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes-mean(size))
summarize(cran,avg_byte=mean(size))
summarize(cran,avg_bytes=mean(size))
0
swirl()
ibrary(dplyr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
swirl()
swirl()
?rm
rm(mydf)
rm("mydf")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package)
summarize(by_package,mean(size))
submit()
pack_sum
quatile(pack_sum$count,probs=0.99)
quantile(pack_sum$count,probs=0.99)
top_counts <- filter(pack_sum,count > 679)
top_counts
head(top_counts,20)
arrange(top_counts,desc(count))
quantile(pacl_sum$unique,probs=0.99)
quantile(pack_sum$unique,probs=0.99)
top_unique <- filter(pack_sum,unique > 465)
top_unique
arrange(top_unique,desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
reset()
submit()
submit()
submit()
0
quit()
library(swril)
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child~parent,galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
lm(child~parent,galton)
fot <- lm(child~parent,galton)
fit <- lm(child~parent,galton)
summary(fit)
0
quit()
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~x)
library(swirl)
swirl()
quit()
library(swirl)
swirl()
fit <- lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residulas,galton$parent)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coe[2]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(child)
varChild <- var()
varChild <- var(fit$child)
varChild <- var(fit)
varChild <- var(galto&child)
varChild <- var(galton&child)
View(galton)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes,varEst)
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist,attenu)
mean(efit$residuals) == 0
mean(efit$residuals)
cov(efit$residuals,efit$mag)
cov(efit$residuals,attenu$mag)
cov(efit4residuals,attenu$dist)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(child,parent,galton)
l_nor <- lm(child,parent)
View(galton)
View(attenu)
l_nor <- lm(gch_nor~gpa_nor)
0
quit()
library(swirl)
swirl()
fit <- lm(child~parent,galton)
sqrt(sum(sq(fit$residuals)/(n-2)))
sqrt(sum((fit$residuals)^2/(n-2)))
sqrt(sum(fit4residuals^2)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(sum(fit$residuals)^2)
sRes <- deviance(sum(galton$residuals)^2)
sRes <- deviance(sum(residuals)^2)
sRes <- deviance
sRes <-deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
(cor(galton$child,galton$parent))^2
(cor(galton$parent,galton$child))^2
cor(galton$parent,galton$child)^2
ones <-rep(1,nrow(galton))
lm(child~ones+parent -1,galton)
lm(child~parent,galton)
lm(child~1,galton)-68.09
lm(child~1,galton)
view(tress)
View(tress)
View(trees)
fit <- lm(Volume ~Girth +Height +Constant -1,tress)
fit <- lm(Volume ~Girth +Height +Constant -1,trees)
trees2 <- eliminate("Girth",trees)
head(trees2)
fit2 <-lm(Volume ~Height +Constant -1,trees2)
lapply(list(fit,fit2),coef)
data = mtcars
?mtcars
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
# To compare model we usually use an anova table
# anova null hypothesis says that both models are the same.
compare <- anova(fit1, fit2)
compare$Pr
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the hat diagonal for the most influential point
fit <- lm(y ~ x)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the slope dfbeta for the point with the highest hat value.
fit <- lm(y ~ x)
dfbetas(fit)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
M <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
M
M$finalModel
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(M, testSA))
missClass(trainSA$chd, predict(M, trainSA))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(ElemStatLearn)
install.package("ElemStatLearn")
install.packages("ElemStatLearn")
install.packages("ElemStatLearn")
setInternet2(NA)
> setInternet2(FALSE)
> setInternet2(NA)
setInternet2(NA)
setInternet2(FALSE)
setInternet2(NA)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
?randomForest
??randomForest
install.packages("randomForest")
library(randomForest)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
?varimp
??varimp
install.packages(“caret"")
install.packages(“caret")
install.packages(“caret")
install.packages("caret")
b <- varImp(a)
library(caret)
b <- varImp(a)
order(b)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
table(vowel.train$y)
set.seed(33833)
require(caret)
M1 <- train(y ~ ., data=vowel.train, method="rf")
M2 <- train(y ~ ., data=vowel.train, method="gbm")
M2 <- train(y ~ ., data=vowel.train, method="gbm")
??gbm
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
table(vowel.train$y)
set.seed(33833)
require(caret)
M1 <- train(y ~ ., data=vowel.train, method="rf")
M2 <- train(y ~ ., data=vowel.train, method="gbm")
??e1071
install.package("e1071")
install.packages("e1071")
library(e1071)
M1 <- train(y ~ ., data=vowel.train, method="rf")
M2 <- train(y ~ ., data=vowel.train, method="gbm")
library(caret)
install.packages("ISLR")
install.packages("kernlab")
install.packages("splines")
install.packages("splines")
install.packages("randomForest")
library(devtools)
install.packages("Rtools")
library(shiny)
library(manipulate)
library(devtools)
install_github("ramnathv/slidify")
install_github("ramnathv/rCharts")
install_github("ramnathv/rCharts")
install_github("ramnathv/rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
install_github("ramnathv/rCharts")
library(shiny)
library(devtools)
install_github("ramnathv/rCharts")
library(rCharts)
colSums
dgamma
ftype(mean)
install.packages("prpr")
install.packages("pryr")
library(pryr)
fype(mean)
ftype(mean)
ftype(colSums)
library(cinternal)
library(internal)
install.packages("internal")
install.packages("GoogleVis")
install.packages("googleVis")
library(googleVis)
library(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='chuxuansorajin',
token='28EDF3A8EF3D3BDF8AF3F7BD11876FA8',
secret='uvtjaLvC51tziE//UQcFZINRHvT7TZY/yGpGkY/t')
shinyapps::deployApp('path/to/your/app')
shinyapps::setAccountInfo(name='chuxuansorajin',
token='28EDF3A8EF3D3BDF8AF3F7BD11876FA8',
secret='uvtjaLvC51tziE//UQcFZINRHvT7TZY/yGpGkY/t')
shinyapps::deployApp('path/to/your/app')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
install_github('ropensci/plotly')
library(plotly)
library(slidfy)
library(slidify)
install.packages(c("Rcpp", "httpuv", "shiny"))
install.packages(c("Rcpp", "httpuv", "shiny"))
install.packages(c("Rcpp", "httpuv", "shiny"))
install.packages(c("Rcpp", "httpuv"))
install.packages(c("Rcpp", "httpuv"))
install.packages(c("Rcpp", "httpuv"))
install.packages("Rcpp" )
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("httpuv")
install.packages("httpuv")
shiny::runApp('E:/developing product/project')
library(shiny)
setwd("E:/developing product/project")
library(shinyapps)
shinyapps::deployApp('E:/developing product/project')
library(shinyapps)
shinyapps::deployApp('E:/developing product/project')
deployApp()
library(shinyapps)
shinyapps::deployApp('E:/developing product/project')
